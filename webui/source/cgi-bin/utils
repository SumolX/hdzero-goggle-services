# Returns success on substring match 
utils_has_string() {
    str="$1"
    sub="$2"
    if [ "${str#*"$sub"}" != "$str" ]; then
        return 0
    else
        return 1
    fi
}

# Transfer binary file to client
utils_send_binary_file() {
    echo "content-type: application/x-download"
    echo "content-disposition: attachment; filename=$2"
    echo ""
    
    cat $1/$2
}

# Transfer video file to client
utils_send_video_file() {
    echo "content-type: video/mp4"
    echo "content-length: $(wc -c <$1/$2)"
    echo ""
    
    cat $1/$2
}

# Transfer image file to client
utils_send_image_file() {
    echo "content-type: image/jpg"
    echo "content-length: $(wc -c <$1/$2)"
    echo ""
    
    cat $1/$2
}

# login create token and save in cookie
utils_is_client_authorized() {
    salt="hdzgoggles"
    pw="$(cat /mnt/app/setting.ini | grep "root_pw" | awk -F '=' '{print $2}')"

    if [ ! -f /tmp/mkpw.sh ]; then
        echo "mkpasswd -m sha512crypt --salt="$salt" --stdin << EOF" > /tmp/mkpw.sh
        echo "\$1" >> /tmp/mkpw.sh
        echo "EOF" >> /tmp/mkpw.sh
        chmod +x /tmp/mkpw.sh
    fi

    if [ ! -f /tmp/mktoken.sh ]; then
        echo "mkpasswd -m sha512crypt --stdin << EOF" > /tmp/mktoken.sh
        echo "\$1" >> /tmp/mktoken.sh
        echo "EOF" >> /tmp/mktoken.sh
        chmod +x /tmp/mktoken.sh
    fi

    hash_server="$(/tmp/mkpw.sh "$pw")"
    hash_client="$(/tmp/mkpw.sh "$1")"
    if [ "$hash_server" == "$hash_client" ]; then
        token="$(/tmp/mktoken.sh \"$hash_server\")"
        dt=`TZ=UTC date -d '+1 day' '+%Y-%m-%d %H:%M:%S'`
        echo "Content-Type: text/html"
        echo "Set-Cookie: token=$token;expires=$dt;version=1;path=/"      
        echo ""
    else
        dt=`TZ=UTC date -d '-1 day' '+%Y-%m-%d %H:%M:%S'`
        echo "Content-Type: text/html"
        echo "Set-Cookie: token=$token;expires=$dt;version=1;path=/"      
        echo ""
    
        if [ -z "$1" ]; then
            echo "Status: 200 OK"
        else
            echo "Status: 401 Not Authorized"
        fi
    fi
}

# Verify if action is allowed
utils_is_action_authorized() {
    ret = 1
    salt="hdzgoggles"
    pw="$(cat /mnt/app/setting.ini | grep "root_pw" | awk -F '=' '{print $2}')"

    if [ ! -f /tmp/mktoken.sh ]; then
        echo "mkpasswd -m sha512crypt --stdin << EOF" > /tmp/mktoken.sh
        echo "\$1" >> /tmp/mktoken.sh
        echo "EOF" >> /tmp/mktoken.sh
        chmod +x /tmp/mktoken.sh
    fi
     
    hash_server="$(/tmp/mkpw.sh "$pw")"
    hash_token="$(/tmp/mktoken.sh \"$hash_server\")"
    cookie_token="${HTTP_COOKIE#*=}" 
    
    if [ "$hash_token" == "$cookie_token" ]; then
        ret = 0
    fi
    return ret
}
