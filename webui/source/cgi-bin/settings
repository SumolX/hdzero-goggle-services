#!/bin/bash

# Includes
. ./constants
. ./utils

# Handlers

# Send the entire settings file
on_settings() {
    ContentJson
    #utils_is_action_authorized "${HTTP_COOKIE#token=}"
    if test -f ${SETTING_PATH}; then
        count=0
        body=""
        while read line; do
          ((count++))
          if [ ! -z "${line}" ]; then
              IFS="=" read key value <<< "$line"
              if [ ! -z "${key}" ] && [ ! -z "${value}" ]; then
                # settings
                settings="${settings} {\"line\":\"${count}\" \"key\":\"${key}\" \"value\":\"${value}\"},"
              elif [ ! -z "${key}" ] && [ $count -gt 1 ]; then
                # sections
                settings="${settings%?}"
                body="${body} \"${section}\": [ $settings ],"
                section=$(echo "$key" | sed 's/[][]//g')
                settings=
              else
                # first section
                section=$(echo "$key" | sed 's/[][]//g')
              fi
          fi
		done < "$SETTING_PATH"
		settings="${settings%?}"
		body="${body} \"${section}\": [ $settings ]"
		echo "{ \"file\": { $body } }"
	    else
		echo "Status: 401"
	    fi
	}

	# Send a settings section with line numbers
	on_section_read() {
	  echo "Content-Type: application/json"
	  echo ""
	 

	  #utils_is_action_authorized "${HTTP_COOKIE#token=}"
	echo "read: {$1}" >> debug
  if test -f ${SETTING_PATH}; then
     settings=""
     count=$(sed -n "/\[$1\]/{=;q;}" "$SETTING_PATH")
     echo "count: {$count}" >> debug
     while read line; do
        IFS="=" read key value <<< "$line"
        if [ ! -z "${key}" ] && [ ! -z "${value}" ]; then
           # settings
           ((count++))
           settings="${settings} { \"line\": \"${count}\", \"key\": \"${key}\", \"value\": \"${value}\" },"
        fi
        done < <(sed -n "/\[$1\]/,/\[/p" "$SETTING_PATH")
        settings="${settings%?}"
        echo "{\"section\": \"$1\", \"settings\": [ $settings ] }"
   else
	echo "Status: 401"
   fi
}

# Change a setting by line number
on_setting_change() {
   echo "Content-Type: text/html"
   echo ""

   #utils_is_action_authorized "${HTTP_COOKIE#token=}"
   if test -f ${SETTING_PATH}; then
      sed -i "${1}s/.*/${2}/" "$SETTING_PATH"
      if [ $? -eq 0 ]; then
	 echo "Status: 200 OK"
      else
	 echo "Status: 500"
      fi
   else
      echo "Status: 401"
   fi
}

# Add a setting at line number, move everthing after down one line
on_setting_insert() {
  echo "Content-Type: text/html"
  echo ""

  #utils_is_action_authorized "${HTTP_COOKIE#token=}"
  if test -f ${SETTING_PATH}; then
     sed -i "${1}i ${2}" "$SETTING_PATH"
     if [ $? -eq 0 ]; then
	echo "Status: 200 OK"
     else
	echo "Status: 500"
     fi
  else
     echo "Status: 401"
  fi
}

# Delete a setting at line number, move everthing after up one line
on_setting_delete() {
  echo "Content-Type: text/html"
  echo ""
	  
  #utils_is_action_authorized "${HTTP_COOKIE#token=}"
  if test -f ${SETTING_PATH}; then
     sed -i "${1}d" "$SETTING_PATH"
     if [ $? -eq 0 ]; then
	echo "Status: 200 OK"
     else
	echo "Status: 500"
     fi
  else
     echo "Status: 401"
  fi
}

# backup the setting file to the sdcard, overwrite
on_backup() {
  echo "Content-Type: text/html"
  echo ""
	  
  #utils_is_action_authorized "${HTTP_COOKIE#token=}"
  if test -f ${SETTING_PATH} -a ! -z "$(mount | grep ${SDC_PATH})"; then
     cp ${SETTINGG_PATH} "${SDC_PATH}settings.bak"
     if [ $? -eq 0 ]; then
	echo "Status: 200 OK"
     else
	echo "Status: 500"
     fi
  else
     echo "Status: 401"
  fi
}

# Parse Request
 if [ -z $QUERY_STRING ]; then
   on_settings
 else
    IFS="&"
    set -- $QUERY_STRING
    key="${1%=*}"
    if [ "$REQUEST_METHOD" = "GET" ]; then
       if [ ${key} == "line" ]; then
          NotImplemented "Needs development."
       elif [ ${key} == "section" ]; then
          on_section_read "${1#*=}"
       else
          NotImplemented "Key not recongized. For get use only line, section."
       fi
    elif [ "$REQUEST_METHOD" = "POST" ]; then
       if [ "$CONTENT_LENGTH" -gt 0 ]; then
           read -n $CONTENT_LENGTH POST_DATA <&0
        case ${key} in
          put)
              if [ ${1#*=} == "line" ]; then
                echo '{"message": "Hello from PUT line"}' >> debug
              elif [ ${1#*=} == "section" ]; then
                echo '{"message": "Hello from PUT section" }' >> debug
              else
                 NotImplemented "Query not recongized. For put use only line, section or file."
              fi
            ;;
          post)
              echo '{"message": "Hello from POST"}' >> debug
            ;;
          patch)
              echo '{"message": "Hello from PATCH"}' >> debug
            ;;
          delete)
              echo '{"message": "Hello from DELETE"}' >> debug
         ;;
          *)
              NotImplemented "POST method query not recongized. Use only put, post, patch, delete."
           ;;
       esac
       else
          NotImplemented "Method is not recognized. Use only GET or POST."
       fi
    else
       Notimplementd "Method is not recognized. Use only GET or POST."
    fi
 fi

